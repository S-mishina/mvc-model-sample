// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"learn-gin-mvc/application/model/orm/ent/migrate"

	"learn-gin-mvc/application/model/orm/ent/todolist"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Todolist is the client for interacting with the Todolist builders.
	Todolist *TodolistClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Todolist = NewTodolistClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Todolist: NewTodolistClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Todolist: NewTodolistClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Todolist.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Todolist.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Todolist.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *TodolistMutation:
		return c.Todolist.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// TodolistClient is a client for the Todolist schema.
type TodolistClient struct {
	config
}

// NewTodolistClient returns a client for the Todolist from the given config.
func NewTodolistClient(c config) *TodolistClient {
	return &TodolistClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `todolist.Hooks(f(g(h())))`.
func (c *TodolistClient) Use(hooks ...Hook) {
	c.hooks.Todolist = append(c.hooks.Todolist, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `todolist.Intercept(f(g(h())))`.
func (c *TodolistClient) Intercept(interceptors ...Interceptor) {
	c.inters.Todolist = append(c.inters.Todolist, interceptors...)
}

// Create returns a builder for creating a Todolist entity.
func (c *TodolistClient) Create() *TodolistCreate {
	mutation := newTodolistMutation(c.config, OpCreate)
	return &TodolistCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Todolist entities.
func (c *TodolistClient) CreateBulk(builders ...*TodolistCreate) *TodolistCreateBulk {
	return &TodolistCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Todolist.
func (c *TodolistClient) Update() *TodolistUpdate {
	mutation := newTodolistMutation(c.config, OpUpdate)
	return &TodolistUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TodolistClient) UpdateOne(t *Todolist) *TodolistUpdateOne {
	mutation := newTodolistMutation(c.config, OpUpdateOne, withTodolist(t))
	return &TodolistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TodolistClient) UpdateOneID(id int) *TodolistUpdateOne {
	mutation := newTodolistMutation(c.config, OpUpdateOne, withTodolistID(id))
	return &TodolistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Todolist.
func (c *TodolistClient) Delete() *TodolistDelete {
	mutation := newTodolistMutation(c.config, OpDelete)
	return &TodolistDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TodolistClient) DeleteOne(t *Todolist) *TodolistDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TodolistClient) DeleteOneID(id int) *TodolistDeleteOne {
	builder := c.Delete().Where(todolist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TodolistDeleteOne{builder}
}

// Query returns a query builder for Todolist.
func (c *TodolistClient) Query() *TodolistQuery {
	return &TodolistQuery{
		config: c.config,
		inters: c.Interceptors(),
	}
}

// Get returns a Todolist entity by its id.
func (c *TodolistClient) Get(ctx context.Context, id int) (*Todolist, error) {
	return c.Query().Where(todolist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TodolistClient) GetX(ctx context.Context, id int) *Todolist {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TodolistClient) Hooks() []Hook {
	return c.hooks.Todolist
}

// Interceptors returns the client interceptors.
func (c *TodolistClient) Interceptors() []Interceptor {
	return c.inters.Todolist
}

func (c *TodolistClient) mutate(ctx context.Context, m *TodolistMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TodolistCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TodolistUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TodolistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TodolistDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Todolist mutation op: %q", m.Op())
	}
}
