// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"learn-gin-mvc/application/model/orm/ent/predicate"
	"learn-gin-mvc/application/model/orm/ent/todolist"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeTodolist = "Todolist"
)

// TodolistMutation represents an operation that mutates the Todolist nodes in the graph.
type TodolistMutation struct {
	config
	op             Op
	typ            string
	id             *int
	title          *string
	body           *string
	priority       *int
	addpriority    *int
	delete_flag    *int
	adddelete_flag *int
	created_at     *time.Time
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Todolist, error)
	predicates     []predicate.Todolist
}

var _ ent.Mutation = (*TodolistMutation)(nil)

// todolistOption allows management of the mutation configuration using functional options.
type todolistOption func(*TodolistMutation)

// newTodolistMutation creates new mutation for the Todolist entity.
func newTodolistMutation(c config, op Op, opts ...todolistOption) *TodolistMutation {
	m := &TodolistMutation{
		config:        c,
		op:            op,
		typ:           TypeTodolist,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTodolistID sets the ID field of the mutation.
func withTodolistID(id int) todolistOption {
	return func(m *TodolistMutation) {
		var (
			err   error
			once  sync.Once
			value *Todolist
		)
		m.oldValue = func(ctx context.Context) (*Todolist, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Todolist.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTodolist sets the old Todolist of the mutation.
func withTodolist(node *Todolist) todolistOption {
	return func(m *TodolistMutation) {
		m.oldValue = func(context.Context) (*Todolist, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TodolistMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TodolistMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TodolistMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TodolistMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Todolist.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *TodolistMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *TodolistMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Todolist entity.
// If the Todolist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodolistMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *TodolistMutation) ResetTitle() {
	m.title = nil
}

// SetBody sets the "body" field.
func (m *TodolistMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *TodolistMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the Todolist entity.
// If the Todolist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodolistMutation) OldBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ResetBody resets all changes to the "body" field.
func (m *TodolistMutation) ResetBody() {
	m.body = nil
}

// SetPriority sets the "priority" field.
func (m *TodolistMutation) SetPriority(i int) {
	m.priority = &i
	m.addpriority = nil
}

// Priority returns the value of the "priority" field in the mutation.
func (m *TodolistMutation) Priority() (r int, exists bool) {
	v := m.priority
	if v == nil {
		return
	}
	return *v, true
}

// OldPriority returns the old "priority" field's value of the Todolist entity.
// If the Todolist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodolistMutation) OldPriority(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriority is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriority requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriority: %w", err)
	}
	return oldValue.Priority, nil
}

// AddPriority adds i to the "priority" field.
func (m *TodolistMutation) AddPriority(i int) {
	if m.addpriority != nil {
		*m.addpriority += i
	} else {
		m.addpriority = &i
	}
}

// AddedPriority returns the value that was added to the "priority" field in this mutation.
func (m *TodolistMutation) AddedPriority() (r int, exists bool) {
	v := m.addpriority
	if v == nil {
		return
	}
	return *v, true
}

// ResetPriority resets all changes to the "priority" field.
func (m *TodolistMutation) ResetPriority() {
	m.priority = nil
	m.addpriority = nil
}

// SetDeleteFlag sets the "delete_flag" field.
func (m *TodolistMutation) SetDeleteFlag(i int) {
	m.delete_flag = &i
	m.adddelete_flag = nil
}

// DeleteFlag returns the value of the "delete_flag" field in the mutation.
func (m *TodolistMutation) DeleteFlag() (r int, exists bool) {
	v := m.delete_flag
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteFlag returns the old "delete_flag" field's value of the Todolist entity.
// If the Todolist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodolistMutation) OldDeleteFlag(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteFlag is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteFlag requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteFlag: %w", err)
	}
	return oldValue.DeleteFlag, nil
}

// AddDeleteFlag adds i to the "delete_flag" field.
func (m *TodolistMutation) AddDeleteFlag(i int) {
	if m.adddelete_flag != nil {
		*m.adddelete_flag += i
	} else {
		m.adddelete_flag = &i
	}
}

// AddedDeleteFlag returns the value that was added to the "delete_flag" field in this mutation.
func (m *TodolistMutation) AddedDeleteFlag() (r int, exists bool) {
	v := m.adddelete_flag
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteFlag resets all changes to the "delete_flag" field.
func (m *TodolistMutation) ResetDeleteFlag() {
	m.delete_flag = nil
	m.adddelete_flag = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TodolistMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TodolistMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Todolist entity.
// If the Todolist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodolistMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TodolistMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the TodolistMutation builder.
func (m *TodolistMutation) Where(ps ...predicate.Todolist) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TodolistMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TodolistMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Todolist, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TodolistMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TodolistMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Todolist).
func (m *TodolistMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TodolistMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.title != nil {
		fields = append(fields, todolist.FieldTitle)
	}
	if m.body != nil {
		fields = append(fields, todolist.FieldBody)
	}
	if m.priority != nil {
		fields = append(fields, todolist.FieldPriority)
	}
	if m.delete_flag != nil {
		fields = append(fields, todolist.FieldDeleteFlag)
	}
	if m.created_at != nil {
		fields = append(fields, todolist.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TodolistMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case todolist.FieldTitle:
		return m.Title()
	case todolist.FieldBody:
		return m.Body()
	case todolist.FieldPriority:
		return m.Priority()
	case todolist.FieldDeleteFlag:
		return m.DeleteFlag()
	case todolist.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TodolistMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case todolist.FieldTitle:
		return m.OldTitle(ctx)
	case todolist.FieldBody:
		return m.OldBody(ctx)
	case todolist.FieldPriority:
		return m.OldPriority(ctx)
	case todolist.FieldDeleteFlag:
		return m.OldDeleteFlag(ctx)
	case todolist.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Todolist field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TodolistMutation) SetField(name string, value ent.Value) error {
	switch name {
	case todolist.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case todolist.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	case todolist.FieldPriority:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriority(v)
		return nil
	case todolist.FieldDeleteFlag:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteFlag(v)
		return nil
	case todolist.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Todolist field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TodolistMutation) AddedFields() []string {
	var fields []string
	if m.addpriority != nil {
		fields = append(fields, todolist.FieldPriority)
	}
	if m.adddelete_flag != nil {
		fields = append(fields, todolist.FieldDeleteFlag)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TodolistMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case todolist.FieldPriority:
		return m.AddedPriority()
	case todolist.FieldDeleteFlag:
		return m.AddedDeleteFlag()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TodolistMutation) AddField(name string, value ent.Value) error {
	switch name {
	case todolist.FieldPriority:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPriority(v)
		return nil
	case todolist.FieldDeleteFlag:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteFlag(v)
		return nil
	}
	return fmt.Errorf("unknown Todolist numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TodolistMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TodolistMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TodolistMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Todolist nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TodolistMutation) ResetField(name string) error {
	switch name {
	case todolist.FieldTitle:
		m.ResetTitle()
		return nil
	case todolist.FieldBody:
		m.ResetBody()
		return nil
	case todolist.FieldPriority:
		m.ResetPriority()
		return nil
	case todolist.FieldDeleteFlag:
		m.ResetDeleteFlag()
		return nil
	case todolist.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Todolist field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TodolistMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TodolistMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TodolistMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TodolistMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TodolistMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TodolistMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TodolistMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Todolist unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TodolistMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Todolist edge %s", name)
}
