// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"learn-gin-mvc/application/model/orm/ent/predicate"
	"learn-gin-mvc/application/model/orm/ent/todolist"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TodolistUpdate is the builder for updating Todolist entities.
type TodolistUpdate struct {
	config
	hooks    []Hook
	mutation *TodolistMutation
}

// Where appends a list predicates to the TodolistUpdate builder.
func (tu *TodolistUpdate) Where(ps ...predicate.Todolist) *TodolistUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTitle sets the "title" field.
func (tu *TodolistUpdate) SetTitle(s string) *TodolistUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetBody sets the "body" field.
func (tu *TodolistUpdate) SetBody(s string) *TodolistUpdate {
	tu.mutation.SetBody(s)
	return tu
}

// SetPriority sets the "priority" field.
func (tu *TodolistUpdate) SetPriority(i int) *TodolistUpdate {
	tu.mutation.ResetPriority()
	tu.mutation.SetPriority(i)
	return tu
}

// AddPriority adds i to the "priority" field.
func (tu *TodolistUpdate) AddPriority(i int) *TodolistUpdate {
	tu.mutation.AddPriority(i)
	return tu
}

// SetDeleteFlag sets the "delete_flag" field.
func (tu *TodolistUpdate) SetDeleteFlag(i int) *TodolistUpdate {
	tu.mutation.ResetDeleteFlag()
	tu.mutation.SetDeleteFlag(i)
	return tu
}

// SetNillableDeleteFlag sets the "delete_flag" field if the given value is not nil.
func (tu *TodolistUpdate) SetNillableDeleteFlag(i *int) *TodolistUpdate {
	if i != nil {
		tu.SetDeleteFlag(*i)
	}
	return tu
}

// AddDeleteFlag adds i to the "delete_flag" field.
func (tu *TodolistUpdate) AddDeleteFlag(i int) *TodolistUpdate {
	tu.mutation.AddDeleteFlag(i)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TodolistUpdate) SetCreatedAt(t time.Time) *TodolistUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TodolistUpdate) SetNillableCreatedAt(t *time.Time) *TodolistUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// Mutation returns the TodolistMutation object of the builder.
func (tu *TodolistUpdate) Mutation() *TodolistMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TodolistUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TodolistMutation](ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TodolistUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TodolistUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TodolistUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TodolistUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   todolist.Table,
			Columns: todolist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: todolist.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(todolist.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Body(); ok {
		_spec.SetField(todolist.FieldBody, field.TypeString, value)
	}
	if value, ok := tu.mutation.Priority(); ok {
		_spec.SetField(todolist.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedPriority(); ok {
		_spec.AddField(todolist.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tu.mutation.DeleteFlag(); ok {
		_spec.SetField(todolist.FieldDeleteFlag, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedDeleteFlag(); ok {
		_spec.AddField(todolist.FieldDeleteFlag, field.TypeInt, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(todolist.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todolist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TodolistUpdateOne is the builder for updating a single Todolist entity.
type TodolistUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TodolistMutation
}

// SetTitle sets the "title" field.
func (tuo *TodolistUpdateOne) SetTitle(s string) *TodolistUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetBody sets the "body" field.
func (tuo *TodolistUpdateOne) SetBody(s string) *TodolistUpdateOne {
	tuo.mutation.SetBody(s)
	return tuo
}

// SetPriority sets the "priority" field.
func (tuo *TodolistUpdateOne) SetPriority(i int) *TodolistUpdateOne {
	tuo.mutation.ResetPriority()
	tuo.mutation.SetPriority(i)
	return tuo
}

// AddPriority adds i to the "priority" field.
func (tuo *TodolistUpdateOne) AddPriority(i int) *TodolistUpdateOne {
	tuo.mutation.AddPriority(i)
	return tuo
}

// SetDeleteFlag sets the "delete_flag" field.
func (tuo *TodolistUpdateOne) SetDeleteFlag(i int) *TodolistUpdateOne {
	tuo.mutation.ResetDeleteFlag()
	tuo.mutation.SetDeleteFlag(i)
	return tuo
}

// SetNillableDeleteFlag sets the "delete_flag" field if the given value is not nil.
func (tuo *TodolistUpdateOne) SetNillableDeleteFlag(i *int) *TodolistUpdateOne {
	if i != nil {
		tuo.SetDeleteFlag(*i)
	}
	return tuo
}

// AddDeleteFlag adds i to the "delete_flag" field.
func (tuo *TodolistUpdateOne) AddDeleteFlag(i int) *TodolistUpdateOne {
	tuo.mutation.AddDeleteFlag(i)
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TodolistUpdateOne) SetCreatedAt(t time.Time) *TodolistUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TodolistUpdateOne) SetNillableCreatedAt(t *time.Time) *TodolistUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// Mutation returns the TodolistMutation object of the builder.
func (tuo *TodolistUpdateOne) Mutation() *TodolistMutation {
	return tuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TodolistUpdateOne) Select(field string, fields ...string) *TodolistUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Todolist entity.
func (tuo *TodolistUpdateOne) Save(ctx context.Context) (*Todolist, error) {
	return withHooks[*Todolist, TodolistMutation](ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TodolistUpdateOne) SaveX(ctx context.Context) *Todolist {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TodolistUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TodolistUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TodolistUpdateOne) sqlSave(ctx context.Context) (_node *Todolist, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   todolist.Table,
			Columns: todolist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: todolist.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Todolist.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, todolist.FieldID)
		for _, f := range fields {
			if !todolist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != todolist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(todolist.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Body(); ok {
		_spec.SetField(todolist.FieldBody, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Priority(); ok {
		_spec.SetField(todolist.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedPriority(); ok {
		_spec.AddField(todolist.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.DeleteFlag(); ok {
		_spec.SetField(todolist.FieldDeleteFlag, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedDeleteFlag(); ok {
		_spec.AddField(todolist.FieldDeleteFlag, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(todolist.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Todolist{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todolist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
